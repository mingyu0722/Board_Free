<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.blockcom.board.mapper.BoardMapper">
	
	<!-- Total List -->
	<select id="totalCount" resultType="int">
		SELECT
			count(*) AS totalCount
			FROM
				board_free AS bf
			JOIN
				member AS mb
			WHERE
				bf.use_flag = 'Y'
			AND
				bf.bf_cate_idx = #{bf_cate_idx}
			AND
				bf.mem_idx = mb.mem_idx
			<if test="searchCondition != null and searchCondition.equals('bf_title')">
        	AND
            	(
                	bf.bf_title LIKE '%${searchValue}%'
                )
        	</if>
        	<if test="searchCondition != null and searchCondition.equals('reg_date')">
            AND
                (
                	bf.reg_date LIKE '%${searchValue}%'
                )
        	</if>
        	<if test="searchCondition != null and searchCondition.equals('mem_name')">
            AND
                (
                	mb.mem_name LIKE '%${searchValue}%'
                )
        	</if>
	</select>
	
	<!-- Search Board List -->
	<select id="listAll" resultType="kr.co.blockcom.board.vo.BoardVO">
		SELECT 
			@rownum := @rownum + 1 AS RNUM, 
			bf.bf_idx, 
			bf.bf_title, 
			mb.mem_name, 
			bf.reg_date, 
			bf.mod_date, 
			bf.bf_cate_idx, 
			bf.use_sec, 
			bf.mem_idx,
			(
				SELECT
					COUNT(*)
					FROM view_count
					WHERE bf.bf_idx = view_count.bf_idx
			) AS view_cnt,
	   		(
	   			SELECT 
	   				COUNT(*) 
	   				FROM board_free_reply
       				WHERE board_free_reply.bf_idx = bf.bf_idx
       				AND board_free_reply.use_flag = 'Y'
       		) AS replyCnt
			FROM 
				board_free as bf, 
				(
				 	SELECT @rownum := 0
				) AS R
			JOIN 
				member as mb
			WHERE 
				bf.use_flag = 'Y'
			AND 
				bf.mem_idx = mb.mem_idx
			AND 
				bf.bf_cate_idx = #{bf_cate_idx}
			<!-- AND
				bf.rec_cnt = 0		 -->
			<if test="searchCondition != null and searchCondition.equals('bf_title')">
        	AND
            	(
                	bf.bf_title LIKE '%${searchValue}%'
                )
        	</if>
        	<if test="searchCondition != null and searchCondition.equals('reg_date')">
            AND
                (
                	bf.reg_date LIKE '%${searchValue}%'
                )
        	</if>
        	<if test="searchCondition != null and searchCondition.equals('mem_name')">
            AND
                (
                	mb.mem_name LIKE '%${searchValue}%'
                )
        	</if>	
			ORDER 
				BY bf.bf_idx desc, RNUM desc
			LIMIT 
				#{listStart}, #{perPageNumber};
	</select>
	
	<!-- View Count -->
	<insert id="viewCnt">
		INSERT 
			INTO 
				view_count
				(
					bf_idx, 
					mem_idx
				) 
				SELECT 
					#{bf_idx}, #{mem_idx}
				FROM 
					DUAL
				WHERE 
					NOT EXISTS
					(
						SELECT 
							* 
						FROM 
							view_count 
						WHERE 
							bf_idx = #{bf_idx} 
						AND 
							mem_idx = #{mem_idx}
					);
	</insert>
	
	<!-- <select id="recList" resultType="kr.co.blockcom.board.vo.BoardVO">
		SELECT
			bf.bf_idx, 
			bf.bf_title, 
			mb.mem_name, 
			bf.reg_date, 
			bf.mod_date, 
			bf.view_cnt, 
			bf.bf_cate_idx, 
			bf.use_sec, 
			bf.mem_idx,
	   		(
	   			SELECT 
	   				COUNT(*) 
	   				FROM board_free_reply
       				WHERE board_free_reply.bf_idx = bf.bf_idx
       				AND board_free_reply.use_flag = 'Y'
       		) AS replyCnt
			FROM 
				board_free as bf
			JOIN 
				member as mb
			WHERE 
				bf.use_flag = 'Y'
			AND 
				bf.mem_idx = mb.mem_idx
			AND
				bf.rec_cnt != 0	
			AND 
				bf.bf_cate_idx = #{bf_cate_idx}
			ORDER 
				BY bf.bf_idx desc;
	</select> -->
	
	<!-- Write -->
	<insert id="insert">
		INSERT 
			INTO 
				board_free
				(
					bf_title, 
					bf_contents, 
					mem_idx, 
					reg_date, 
					bf_cate_idx, 
					use_sec
				)
			VALUES 
				(
				 	#{bf_title}, 
				 	#{bf_contents}, 
				 	#{mem_idx}, 
				 	default, 
				 	#{bf_cate_idx}, 
				 	#{use_sec}
				);
	</insert>
	
	<!-- Read -->
	<select id="read" resultType="kr.co.blockcom.board.vo.BoardVO">
		SELECT * 
			FROM 
				board_free as bf
			JOIN 
				member as mb
			WHERE 
				bf.mem_idx = mb.mem_idx
			AND 
				bf_idx = #{bf_idx};
	</select>
	
	<!-- Recommend -->
	<insert id="recommend">
		INSERT 
			INTO 
				recommend
				(
					bf_idx, 
					mem_idx
				) 
				SELECT 
					#{bf_idx}, #{mem_idx}
				FROM 
					DUAL
				WHERE 
					NOT EXISTS
					(
						SELECT 
							* 
						FROM 
							recommend
						WHERE 
							bf_idx = #{bf_idx} 
						AND 
							mem_idx = #{mem_idx}
					);
	</insert>
	
	<select id="recommend_flag" resultType="int">
		SELECT
			*
			FROM
				recommend
			WHERE
				bf_idx = #{bf_idx}
			AND
				mem_idx = #{mem_idx};
	</select>
	
	<!-- PreArticle & NextArticle -->
	<select id="preArticle" resultType="kr.co.blockcom.board.vo.BoardVO">
		SELECT 
			bf.bf_idx, 
			bf.bf_title, 
			bf.use_sec,
    		mb.mem_name,
    		bf.mem_idx
			FROM
				board_free as bf
			JOIN
				member AS mb
			WHERE
				bf.bf_idx
				IN
					(
						SELECT 
							MAX(bf_idx)
						FROM 
							board_free
						WHERE
							bf_idx <![CDATA[<]]> #{bf_idx}
						AND
							use_flag = 'Y'
					)
			AND
				bf.mem_idx = mb.mem_idx
			AND
				bf_cate_idx = 1;
	</select>
	
	<select id="nextArticle" resultType="kr.co.blockcom.board.vo.BoardVO">
		SELECT 
			bf.bf_idx, 
			bf.bf_title, 
			bf.use_sec,
    		mb.mem_name,
    		bf.mem_idx
			FROM
				board_free as bf
			JOIN
				member AS mb
			WHERE
				bf.bf_idx
				IN
					(
						SELECT 
							MIN(bf_idx)
						FROM 
							board_free
						WHERE
							bf_idx <![CDATA[>]]> #{bf_idx}
						AND
							use_flag = 'Y'
					)
			AND
				bf.mem_idx = mb.mem_idx
			AND
				bf_cate_idx = 1;
	</select>
	
	<!-- Delete -->
	<update id="delete">
		UPDATE 
			board_free
		SET 
			use_flag = 'N'
		WHERE 
			bf_idx = #{bf_idx}; 
	</update>
	
	<!-- Update -->	
	<update id="update">		
		UPDATE 
			board_free
		SET 
			bf_title = #{bf_title}, 
			bf_contents = #{bf_contents}, 
			mod_date = current_timestamp, 
			use_sec = #{use_sec}
		WHERE 
			bf_idx = #{bf_idx};
	</update>
	
	
</mapper>